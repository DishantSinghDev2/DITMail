services:
  # Inbound MX Server
  inbound_mx:
    build:
      context: ./mx
    container_name: inbound-mx
    restart: unless-stopped
    ports:
      - "25:25"
    networks:
      - mail_network
    depends_on:
      - mongodb
      - redis
    volumes:
      - certs:/etc/letsencrypt:ro
    environment:
      MONGO_URI: "mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/ditmail?authSource=admin"
      TLS_DOMAIN: "mx.ditmail.online"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"

  # Outbound SMTP Server
  outbound_smtp:
    build:
      context: ./smtp
    container_name: outbound-smtp
    restart: unless-stopped
    ports:
      - "587:587"
      - "465:465"
    networks:
      - mail_network
    depends_on:
      - mongodb
      - redis
    volumes:
      - certs:/etc/letsencrypt:ro
    environment:
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/ditmail?authSource=admin
      TLS_DOMAIN: mx.ditmail.online
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"

  # WebSocket API
  ws:
    build:
      context: ./ws
    container_name: ws
    restart: unless-stopped
    ports:
      - "4000:8080" # External 4000 -> internal 8080
    networks:
      - mail_network
    depends_on:
      - redis
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}

  # Background Worker
  worker:
    build:
      context: ./worker
    container_name: worker
    restart: unless-stopped
    networks:
      - mail_network
    depends_on:
      - mongodb
      - redis
    environment:
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/ditmail?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}

  # Certbot initial issuance via Cloudflare DNS
  certbot-initial:
    image: certbot/dns-cloudflare:latest
    container_name: certbot-initial
    volumes:
      - certs:/etc/letsencrypt
      - ./cloudflare:/root/.secrets/certbot:ro
    command: >
      certonly --dns-cloudflare --dns-cloudflare-credentials /root/.secrets/certbot/cloudflare.ini --email admin@ditmail.online --agree-tos --no-eff-email --key-type ecdsa --elliptic-curve secp384r1 -d mx.ditmail.online -d smtp.ditmail.online ${CERTBOT_ENV}

  # Certbot automatic renewal
  certbot-renew:
    image: certbot/dns-cloudflare:latest
    container_name: certbot-renew
    restart: unless-stopped
    volumes:
      - certs:/etc/letsencrypt
      - ./cloudflare:/root/.secrets/certbot:ro
    entrypoint: >
      sh -c "
        while :; do
          echo 'Checking for certificate renewals...';
          certbot renew --quiet --dns-cloudflare \
            --dns-cloudflare-credentials /root/.secrets/certbot/cloudflare.ini;
          docker kill --signal=HUP inbound-mx;
          docker kill --signal=HUP outbound-smtp;
          sleep 12h;
        done
      "

  # MongoDB
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: unless-stopped
    networks:
      - mail_network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017" # expose MongoDB to host
    command: [ "mongod", "--bind_ip_all" ] # allow connections from outside

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --bind 0.0.0.0
    networks:
      - mail_network
    ports:
      - "6379:6379" # expose to host / remote
    volumes:
      - redis_data:/data

networks:
  mail_network:
    driver: bridge

volumes:
  certs:
  mongo_data:
  redis_data:
