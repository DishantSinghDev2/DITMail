# Docker Compose file using modern syntax and robust patterns
services:
  # Nginx acts as a smart reverse proxy for the Let's Encrypt challenge.
  nginx:
    image: nginx:alpine
    container_name: ditmail-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    command: >
      /bin/sh -c "
        echo 'Preparing Nginx...'
        if [ -f /etc/letsencrypt/live/mx.ditmail.online/fullchain.pem ]; then
          echo 'Certificate found. Using production config.'
          cp /etc/nginx/conf.d/prod.conf /etc/nginx/conf.d/default.conf
        else
          echo 'Certificate not found. Using temporary HTTP config for cert challenge.'
          cp /etc/nginx/conf.d/temp.conf /etc/nginx/conf.d/default.conf
        fi
        echo 'Starting Nginx...'
        nginx -g 'daemon off;'
      "

  # Inbound MX Server
  inbound_mx:
    build:
      context: ./mx
    container_name: inbound-mx
    restart: unless-stopped
    ports:
      - "25:25"
    networks:
      - mail_network
    depends_on:
      - mongodb
      - redis
    volumes:
      - certs:/etc/letsencrypt:ro
    environment:
      # --- Modern Mapping Syntax ---
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/ditmail?authSource=admin
      TLS_DOMAIN: mx.ditmail.online
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379

  # Outbound SMTP Server
  outbound_smtp:
    build:
      context: ./smtp
    container_name: outbound-smtp
    restart: unless-stopped
    ports:
      - "587:587"
      - "465:465"
    networks:
      - mail_network
    depends_on:
      - mongodb
      - redis
    volumes:
      - certs:/etc/letsencrypt:ro
    environment:
      # --- Modern Mapping Syntax ---
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/ditmail?authSource=admin
      TLS_DOMAIN: smtp.ditmail.online
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379

  # Service to get the initial certificates
  certbot-mx:
    image: certbot/certbot:latest
    container_name: certbot-mx
    volumes:
      - certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    command: >
      certonly --webroot --webroot-path=/var/www/certbot --email admin@ditmail.online --agree-tos --no-eff-email --key-type ecdsa --elliptic-curve secp384r1 -d mx.ditmail.online

  certbot-smtp:
    image: certbot/certbot:latest
    container_name: certbot-smtp
    volumes:
      - certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    command: >
      certonly --webroot --webroot-path=/var/www/certbot --email admin@ditmail.online --agree-tos --no-eff-email --key-type ecdsa --elliptic-curve secp384r1 -d smtp.ditmail.online

  # Service for automatic certificate renewal
  certbot-renew:
    image: certbot/certbot:latest
    container_name: certbot-renew
    restart: unless-stopped
    volumes:
      - certs:/etc/letsencrypt
    entrypoint: >
      sh -c "
        while :; do
          echo 'Checking for certificate renewals...';
          certbot renew --quiet;
          docker kill --signal=HUP ditmail-nginx;
          docker kill --signal=HUP inbound-mx;
          docker kill --signal=HUP outbound-smtp;
          sleep 12h;
        done
      "

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: unless-stopped
    networks:
      - mail_network
    environment:
      # --- Modern Mapping Syntax (more explicit than env_file) ---
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db

  # Redis Database
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - mail_network
    volumes:
      - redis_data:/data

networks:
  mail_network:
    driver: bridge

volumes:
  certs:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
  certbot_webroot:
    driver: local
